function [allSub_GMData, flag, errorsub] = getTimeCourse(inputdir, prefix, grayMatterMask, app)
%FORMAT [allSub_GMData, flag, errorsub] = getTimeCourse(inputdir, prefix, grayMatterMask, app)
% getTimeCourse loads functional images for all subjects and converts them 
% into a 3-D matrix of size (voxel x time x subject). This matrix represents 
% the gray matter time course data for each subject.
%
% INPUT:
%   inputdir        - A directory containing all subject data. Each subject's 
%                     data is stored in a separate subdirectory. The expected 
%                     structure is:
%                     - sub001/func/data_sub001.nii(.gz), recommended or
%                     - sub001/data_sub001.nii(.gz).
%
%   prefix          - A string used to identify the target subdirectories 
%                     or files within the inputdir. For example, if the 
%                     subject directories are named 'sub001', 'sub002', etc., 
%                     the prefix could be 'sub'.
%
%   grayMatterMask  - The file path to a gray matter mask file. This mask is 
%                     used to extract time course data from the gray matter 
%                     region of the functional images.
%
%   app             - (Optional) A UI object (e.g., a progress bar or message 
%                     display) for providing feedback during the execution 
%                     of the function.
%
% OUTPUT:
%   allSub_GMData   - A 3-D matrix of size (nVoxel x nTime x nSub), where:
%                     - nVoxel is the number of voxels in the gray matter mask,
%                     - nTime is the number of time points in the functional 
%                       images,
%                     - nSub is the number of subjects.
%                     This matrix contains the gray matter time course data 
%                     for all subjects.
%
%   flag            - A status flag indicating the outcome of the function:
%                     - -1: Indicates that the subject's subdirectory 
%                           (specified by errorsub) contains no .nii or 
%                           .nii.gz file.
%                     -  0: Indicates that the provided prefix is incorrect 
%                           (no matching subdirectories or files were found).
%                     -  1: Indicates that the function completed successfully.
%
%   errorsub        - The index of the subject's subdirectory that contains 
%                     no .nii or .nii.gz file. If no errors are found, this 
%                     value is set to 0.
flag = 1;
errorsub = 0;


%% get the Nsub and Ntime
sublist = getSublistByPrefixed(inputdir, prefix);

% Initialize counters for directories and files
dirCount = 0;
fileCount = 0;

% Loop through all items in sublist
for i = 1:length(sublist)
    itemPath = fullfile(inputdir, sublist(i).name);
    
    if exist(itemPath, 'dir') == 7
        dirCount = dirCount + 1; % Increment directory count
    elseif exist(itemPath, 'file') == 2
        fileCount = fileCount + 1; % Increment file count
    else
        error('Invalid item detected: %s is neither a directory nor a file.', itemPath);
    end
end

% Determine inputType based on counts
if dirCount > 0 && fileCount > 0
    error('Mixed items detected: inputdir contains both directories and files.');
elseif dirCount == length(sublist)
    inputType = 0; % All items are directories
elseif fileCount == length(sublist)
    inputType = 1; % All items are files
else
    error('Unexpected error: unable to determine inputType.');
end

if inputType == 1
    for index = 1 : size(sublist, 1)
        [pathstr, name, ext] = fileparts([inputdir filesep sublist(index).name]);
        if strcmpi(ext,'.gz')
            newSubDir = [pathstr filesep name(1:end-4) filesep 'func'];
        else
            newSubDir = [pathstr filesep name filesep 'func'];
        end
        mkdir(newSubDir)
        movefile([inputdir filesep sublist(index).name], newSubDir)
    end
    inputType = 0;
    sublist = getSublistByPrefixed(inputdir, prefix);
end



Nsub = size(sublist,1);
if Nsub == 0
    flag = 0;
    warning(['There is no subject with a prefix:' prefix]);
    return
end


cd([inputdir filesep sublist(1).name filesep 'func']);

subNiiFile = dir('*.nii');
if size(subNiiFile, 1) == 0
    subNiiFile = dir('*.nii.gz');
end

[~, subHead] = NDN_Read(subNiiFile(1).name);
Ntime = subHead.ImageSize(4);

cd(inputdir)
%%

[d_GM, dR_GM, ~] = readGM(grayMatterMask);

% load functional images and convert them into a 3-D matrix (voxel x time x subject)
allSub_GMData = zeros(length(find(dR_GM)), Ntime, Nsub);
fprintf('loading subject nii file...')
if nargin == 4
    app.ax.Visible = 'on';
    app.ax.Title.String = 'Loading Subjects...';
    ph = patch(app.ax,[0, 1, 1, 0], [0, 0, 1, 1], [1, 1, 1]);
    ph = patch(app.ax,[0, 0, 0, 0], [0, 0, 1, 1], [0.9375, 0.9375, 0.3375]);
    drawnow
end
for subNum = 1:Nsub
    fprintf('..');

    cd([inputdir filesep sublist(subNum).name filesep 'func'])

    % In the /func directory, find the first .nii file. If no .nii file exists,
    % it will retrieve the first .nii.gz file. If neither .nii nor .nii.gz files
    % are found in the /func directory, it will move to the upper directory
    % and perform the search in the same way.
    dfile = dir('*.nii');
    if size(dfile, 1) == 0
        dfile = dir('*.nii.gz');
    end
    if size(dfile, 1) == 0
        cd('..')
        dfile = dir('*.nii');
        if size(dfile, 1) == 0
            dfile = dir('*.nii.gz');
        end
    end

    if size(dfile,1) == 0 % there is no nii file in subject subnum
        flag = -1;
        errorsub = subNum;
        error(['there is no .nii or .nii.gz file in' sublist(subNum).name])
    end

    [volData, volInfo] = NDN_Read([inputdir filesep sublist(subNum).name filesep dfile(1).name]);
    
    d_reshape = reshape(volData, [size(volData,1)*size(volData,2)*size(volData,3), size(volData,4)]);
    if all(size(d_GM) ~= size(squeeze(volData(:,:,:,1))))
        error("masks's shape is not equal to data's shape");
    end
    allSub_GMData(:,:,subNum) = d_reshape(find(dR_GM),:);
    if nargin == 4
        ph.XData = [0, subNum / Nsub, subNum / Nsub, 0];
        jindu = sprintf('%.2f',subNum / Nsub * 100);
        app.ax.Title.String =[ 'loading subject nii file ' jindu '%...'];
        drawnow
    end
end

end